# name: Webcompanion CI/CD Pipeline

name: Branch Protection

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - dev
      - qa
      - prod

jobs:
  branch_protection:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch protection
        run: |
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "GITHUB_REF: $GITHUB_REF"
          
          if [[ $GITHUB_EVENT_NAME == "push" ]]; then
            BRANCH_NAME=$(echo $GITHUB_REF | sed 's#refs/heads/##')
            echo "BRANCH_NAME (push): $BRANCH_NAME"
            if [[ $BRANCH_NAME == "dev" || $BRANCH_NAME == "qa" || $BRANCH_NAME == "prod" ]]; then
              echo "Push denied. You can't push directly to $BRANCH_NAME branch"
              exit 1
            fi
          elif [[ $GITHUB_EVENT_NAME == "pull_request" ]]; then
            BASE_BRANCH=$(jq -r '.pull_request.base.ref' < $GITHUB_EVENT_PATH)
            echo "BASE_BRANCH (pull_request): $BASE_BRANCH"
            # No need to deny PRs, they should be reviewed and merged via the PR process
          fi


# env:
#     BRANCH_NAME: $(echo ${{ github.ref }} | sed 's/refs\/heads\///g')


# on:
#     push:
#         branches:
#             - main
#             - qa
#             - dev
#     pull_request:
#         branches:
#             - main
#             - qa
#             - dev

# jobs:
#     Check-branch:
#         runs-on: ubuntu-latest
#         steps:
#             - name: Check if branch is valid
#               run: |
#                 if [ $BRANCH_NAME != "main" ] && [ $BRANCH_NAME != "qa" ] && [ $BRANCH_NAME != "dev" ]; then
#                     echo "Invalid branch name. Exiting..."
#                     exit 1
#                 fi
#     Pytest:
#         name: Pytest
#         runs-on: ubuntu-latest
#         needs: Check-branch
#         if: ${{ startsWith(github.ref, 'refs/heads/dev') }} || ${{ startsWith(github.ref, 'refs/heads/qa') }} || ${{ startsWith(github.ref, 'refs/heads/main') }} && github.event_name == 'push'
#         steps:
#             - name: Checkout code
#               uses: actions/checkout@v2
            
#             - name: Set up Python
#               uses: actions/setup-python@v2
#               with:
#                 python-version: '3.11'

#             - name: Install dependencies
#               run: |
#                 python -m venv venv
#                 source venv/bin/activate
#                 pip install -r requirements.txt --no-cache-dir
#                 pip install pytest pytest-flask
            
#             - name: Run tests
#               run: |
#                 source venv/bin/activate
#                 pytest

#     Sonarcloud-Scan:
#         name: SonarCloud Scan
#         runs-on: ubuntu-latest
#         needs: Pytest
#         if: ${{ startsWith(github.ref, 'refs/heads/dev') }} || ${{ startsWith(github.ref, 'refs/heads/qa') }} || ${{ startsWith(github.ref, 'refs/heads/main') }} && github.event_name == 'pull_request'
#         steps:
#             - name: Checkout code
#               uses: actions/checkout@v2
#               with:
#                 fetch-depth: 0

#             - name: Set up SonarCloud
#               uses: sonarsource/sonarqube-scan-action@master
#               env:
#                 SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#                 SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
            
#             # - name: SonarQube Quality Gate
#             #   uses: sonarsource/sonarqube-quality-gate-action@master
#             #   env:
#             #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
#     build-deploy-dev:
#         name: Build and Deploy to Dev
#         runs-on: ubuntu-latest
#         needs: Sonarcloud-Scan

#         env:
#             IMAGE_TAG: "dev-${{ github.run_id }}"

#         if: ${{ startsWith(github.ref, 'refs/heads/dev') && github.event_name == 'push' }}
#         steps:
#             - name: Checkout code
#               uses: actions/checkout@v2
            
#             - name: Set up Docker Buildx
#               uses: docker/setup-buildx-action@v2
            
#             - name: Login to Docker Hub
#               uses: docker/login-action@v2
#               with:
#                 username: ${{ secrets.DOCKERHUB_USERNAME }}
#                 password: ${{ secrets.DOCKERHUB_TOKEN }}
            
#             - name: Build Docker image
#               uses: docker/build-push-action@v2
#               id: build
#               with:
#                 context: .
#                 push: false
#                 tags: ${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            
#             # - name: Install Trivy
#             #   run: |
#             #     curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            
#             # - name: Scan Docker image
#             #   run: |
#             #     docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
#             #     trivy image ${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

#             - name: Push Docker image
#               if: success()
#               uses: docker/build-push-action@v2
#               with:
#                 context: .
#                 push: true
#                 tags: ${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
    
#     build-deploy-qa:
#         name: Build and Deploy to QA
#         runs-on: ubuntu-latest
#         needs: Sonarcloud-Scan
#         env:
#             IMAGE_TAG: "qa-${{ github.run_id }}"
#         if: ${{ startsWith(github.ref, 'refs/heads/qa') && github.event_name == 'push' }}
#         steps:
#             - name: Checkout code
#               uses: actions/checkout@v2
            
#             - name: Set up Docker Buildx
#               uses: docker/setup-buildx-action@v2
            
#             - name: Login to Docker Hub
#               uses: docker/login-action@v2
#               with:
#                 username: ${{ secrets.DOCKERHUB_USERNAME }}
#                 password: ${{ secrets.DOCKERHUB_TOKEN }}
            
#             - name: Build Docker image
#               uses: docker/build-push-action@v2
#               id: build
#               with:
#                 context: .
#                 push: false
#                 tags: ${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            
#             # - name: Install Trivy
#             #   run: |
#             #     curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            
#             # - name: Scan Docker image
#             #   run: |
#             #     trivy image ${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

#             - name: Push Docker image
#               if: success()
#               uses: docker/build-push-action@v2
#               with:
#                 context: .
#                 push: true
#                 tags: ${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

#     build-deploy-prod:
#         name: Build and Deploy to Prod
#         runs-on: ubuntu-latest
#         needs: Sonarcloud-Scan
#         env:
#             IMAGE_TAG: "prod-${{ github.run_id }}"
#         if: ${{ startsWith(github.ref, 'refs/heads/main') && github.event_name == 'push' }}
#         steps:
#             - name: Checkout code
#               uses: actions/checkout@v2

#             - name: Set up Docker Buildx
#               uses: docker/setup-buildx-action@v2
            
#             - name: Login to Docker Hub
#               uses: docker/login-action@v2
#               with:
#                 username: ${{ secrets.DOCKERHUB_USERNAME }}
#                 password: ${{ secrets.DOCKERHUB_TOKEN }}
            
#             - name: Build Docker image
#               uses: docker/build-push-action@v2
#               id: build
#               with:
#                 context: .
#                 push: false
#                 tags: ${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            
#             # - name: Install Trivy
#             #   run: |
#             #     curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            
#             # - name: Scan Docker image
#             #   run: |
#             #     trivy image ${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

#             - name: Push Docker image
#               if: success()
#               uses: docker/build-push-action@v2
#               with:
#                 context: .
#                 push: true
#                 tags: ${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        